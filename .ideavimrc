" Use space as leader(default is '\')
let mapleader=" "

" Basic Settings
" Fixed the problem that p paste cannot import class automatically, https://youtrack.jetbrains.com/issue/VIM-25/VIM-code-paste-should-be-smarter
set clipboard+=ideaput
" Keep the number of rows
set scrolloff=5
" Enable relative number
set relativenumber
" Disable relative number
"set norelativenumber
" Ignore case when search
set ignorecase
" Enable smart case when search
set smartcase

" Keybinding

" Move quickly
noremap <C-j> 5j
noremap <C-k> 5k

" Go to start of the line
noremap <C-h> ^
" Go to end of the line
noremap <C-l> $

" Split
map sh :set nosplitright<CR>:vsplit<CR>
map sj :set splitbelow<CR>:split<CR>
map sk :set nosplitbelow<CR>:split<CR>
map sl :set splitright<CR>:vsplit<CR>

" Jump between splits
map <LEADER>h <C-w>h
map <LEADER>j <C-w>j
map <LEADER>k <C-w>k
map <LEADER>l <C-w>l
" Loot with splits
map <LEADER>w <C-w>w

" Scroll
" Move up/down the view port without moving the cursor
noremap J 5<C-e>
noremap K 5<C-y>
" Move left/right the view port without moving the cursor
noremap H 20zh
noremap L 20zl

" Copy and paste
" Copy selection area to system clipboard
nnoremap Y v$y
" Paste in visual mode do not copy
vnoremap p "_dP

" Visual
" Select to the line end
noremap v<C-l> v$h
noremap v<C-h> v^
noremap vie ggVG
" Line visual and Block Visual
nnoremap <C-v> V
nnoremap V <C-v>

" Command mode cursor movement
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>

" Toggle case
map ` ~

" redo
noremap U <C-r>

" Set s no any action
map s <nop>

" Tab switch
nnoremap E gT
nnoremap R gt
nnoremap W 1gt
" nnoremap T $gt
nnoremap T 1gtgT

" Cancel search highlight
map <LEADER><CR> :nohlsearch<CR>

" Save
map S :w<CR>
" Quit
map q :wq<CR>

" Plugins
Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank'
Plug 'preservim/nerdtree'

" Input method
" IdeaVimExtension
set keep-english-in-normal-and-restore-in-insert
let context_aware=1

" vim-multiple-cursors
set multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap <C-a> <Plug>AllWholeOccurrences
xmap <C-a> <Plug>AllWholeOccurrences
nmap <C-x> <Plug>SkipOccurrence
xmap <C-x> <Plug>SkipOccurrence
nmap <C-p> <Plug>RemoveOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" IdeaVim-EasyMotion
set easymotion
map <Leader> <Plug>(easymotion-prefix)
" Search for full-screen words
map <Leader>w <Plug>(easymotion-bd-w)
" Search for full-screen matches
map <Leader>f <Plug>(easymotion-s)

" IDEA action
" Window
map tt :action ActivateProjectToolWindow<CR>
map ss :action SelectInProjectView<CR>

" Project
map tp :action ManageRecentProjects<CR>

" Coding
map <leader>r :action RenameElement<CR>
" map sn :action GotoNextError<CR>
" map sp :action GotoPreviousError<CR>
" Equal ⌘ + ⌥ + Left
map <C-o> :action Back<CR>
" Equal ⌘ + ⌥ + Right
map <C-i> :action Forward<CR>
map <leader>e :action ShowErrorDescription<CR>
map <leader>a :action Annotate<CR>
" File outline
map <leader>o :action FileStructurePopup<CR>

" Git
" Equal ⌥ + F1
map ge :action Git.Branches<CR>
map gh :action Vcs.ShowTabbedFileHistory<CR>

" Bookmarks
" Bookmark list Equal ⇧ + F11
map ml :action ShowBookmarks<CR>
map me :action GotoNextBookmark<CR>
map mb :action GotoPreviousBookmark<CR>
map mm :action ToggleBookmark<CR>

" Debug
map <leader>d :action Debug<CR>
" Equal ⌘ + F8
map <leader>b :action ToggleLineBreakpoint<CR>

" Stop
map <leader>s :action Stop<CR>

" Close project
map Q :action CloseProject<CR>
