" Use space as leader(default is '\')
let mapleader=" "
" Resolve color problem
let &t_ut=''
" Change cursor shape in different modes, neovim dosen't need this. See: https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes
" let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
" let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
" let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
" Show current mode, file name, file status, ruler, etc.
set laststatus=2

" Basic Settings
" No need compatible with vi(Most of plugins will need this)
set nocompatible
" Most of plugins will dependency this
set termguicolors
" Know file type
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on
" Encoding
set encoding=utf-8
" Indent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
" Enable system clipboard(You must ensure :echo has('clipboard') return 1 not 0)
set clipboard=unnamed
" 解决 p 粘贴时无法自动 import class 问题，https://youtrack.jetbrains.com/issue/VIM-25/VIM-code-paste-should-be-smarter
set clipboard+=ideaput
" Format
set indentexpr=
" Let backspace can delete chars
set backspace=indent,eol,start
" Default one line chars length greater than 78, vim will auto create new line, set tw=0 will close this function
set tw=0
" Code collapse
" Collapse by indent
set foldmethod=indent
" Collapse level
set foldlevel=99
" Show space mark(This config will cause vim become slow down, please enable it only in nvim)
set list
" Use '▫' presents space, use '▸' presents TAB
set listchars=tab:▸\ ,trail:▫
" See :h timeout
set notimeout
set ttimeoutlen=0
" Keep the number of rows(such as tt tb H M)
set scrolloff=5
" Highlight
syntax on
" Show line number
set number
" Enable relative number
set relativenumber
" Disable relative number
"set norelativenumber
" Highlight current line
set cursorline
" Highlight current column
" set cursorcolumn
" Auto wrap line(default value)
" set wrap
" Disable auto wrap
set nowrap
" Show command
set showcmd
" Auto complete command with TAB
set wildmenu
" Highlight search result
set hlsearch
" Cancel highlight search result when enter vim
exec "nohlsearch"
" Highlight search result during the search
set incsearch
" Ignore case when search
set ignorecase
" Enable smart case when search
set smartcase
" Enable mouse
set mouse=a
" Automatically change the current directory See: https://vim.fandom.com/wiki/Set_working_directory_to_the_current_file
set autochdir
" Hide last line mode tips if in Insert, Replace or Visual mode, we can use such airline to replace it.
set noshowmode
" Use visual bell replace sources bell
set visualbell
" The screen will not be redraw while excuting macros, registers and other commands that have not been typed.
set lazyredraw
" Show a verticle line on the 120th chars
set colorcolumn=120
" Enable hidden, See also: https://github.com/romgrk/barbar.nvim/issues/153 https://neovim.io/doc/user/options.html#'hidden'
set hidden
" Sovle The tips of 'E21: Cannot make changes, 'Modifiable' is off'
set modifiable

" Save cursor location when next enter vim
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Backup and undo
silent !mkdir -p ~/.config/nvim/tmp/backup
silent !mkdir -p ~/.config/nvim/tmp/undo
" silent !mkdir -p $HOME/.config/nvim/tmp/sessions
set backupdir=~/.config/nvim/tmp/backup,.
set directory=~/.config/nvim/tmp/backup,.
if has('persistent_undo')
	set undofile
	set undodir=~/.config/nvim/tmp/undo,.
endif

" Command keymap
" Set s no any action
map s <nop>
" Save
map S :w<CR>
" Quit
map q :q<CR>
" map q :bp <BAR> bd #<CR>
" Reload ~/.vimrc file
map <LEADER>rs :source $MYVIMRC<CR>
" Open .vimrc file in anywhere
map <LEADER>rc :e ~/.config/nvim/init.vim<CR>
" Cancel highlight
map <LEADER><CR> :nohlsearch<CR>
" Split
" To left
map sh :set nosplitright<CR>:vsplit<CR>
" To down
map sj :set splitbelow<CR>:split<CR>
" To up
map sk :set nosplitbelow<CR>:split<CR>
" To right
map sl :set splitright<CR>:vsplit<CR>
" Jump between splits
map <LEADER>h <C-w>h
map <LEADER>j <C-w>j
map <LEADER>k <C-w>k
map <LEADER>l <C-w>l
" Loot with splits
map <LEADER>w <C-w>w
" Resize split width or height with arrow keys
map <up> :res +5<CR>
map <down> :res -5<CR>
map <left> :vertical resize-5<CR>
map <right> :vertical resize+5<CR>
" Change split layout
" Place the two splits side by side
map sf <C-w>t<C-w>H
" Place the two splits up and down
map sd <C-w>t<C-w>K
" " New tab
" map tn :tabe<CR>
" " Next left tab
" map E :-tabnext<CR>
" " Next right tab
" map R :+tabnext<CR>
" " First tab
" map W :tabfirst<CR>
" " Last tab
" map T :tablast<CR>
" " Move current tab to the left
" map tmh :-tabmove<CR>
" " Move current tab to the right
" map tml :+tabmove<CR>
" Enable or disable spell check
" Tab switch
nnoremap E gT
nnoremap R gt
nnoremap W 1gt
nnoremap T $gt

map <LEADER>sc :set spell!<CR>
" Press space twice to jump to the next '<++>' and edit it
map <LEADER><LEADER> <Esc>/<++><CR>:nohlsearch<CR>c4l
" Generate ascii art by figlet, you can install figlet by exec 'npm install -g figlet-cli' under command line. See: https://github.com/patorjk/figlet-cli
" map tx :r !figlet
" Toggle case
map ` ~
" Move quickly
" noremap J 5j
" noremap K 5k
noremap <C-j> 5j
noremap <C-k> 5k
" noremap E 5e
" noremap B 5b
noremap n nzz
noremap N Nzz
" Map ; to : to quick input comamnd
" noremap ; :
noremap * *zz
noremap # #zz
" Copy selection area to system clipboard
vnoremap Y "+y
nnoremap Y v$y
" 在visual 模式里粘贴不要复制
vnoremap p "_dP
" Folding
noremap <LEADER>o za
" Selete to the line end
noremap v<C-l> v$h
noremap v<C-h> v^
" Go to start of the line
noremap <C-h> ^
" Go to end of the line
noremap <C-l> $
" Move up/down the view port without mving the cursor
noremap J 5<C-e>
noremap K 5<C-y>
" Move left/right the view port without mving the cursor
noremap H 20zh
noremap L 20zl
noremap U <C-r>
noremap vie ggVG

" 上下移动选中文本
vnoremap J :move '>+1<CR>gv-gv
vnoremap K :move '<-2<CR>gv-gv

nnoremap <C-v> V
nnoremap V <C-v>

" Insert mode cursor movement
" Spell tips(Only effect under INSERT mode)
" noremap <C-x> ea<C-x>s
" inoremap <C-x> <Esc>ea<C-x>s

" Command mode cursor movement
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>

" map tt :NERDTreeToggle<CR>

" Open the terminal windows(Use i enter Insert mode so input command, press <C-d> twice to exit terminal)
noremap <LEADER>/ :set splitbelow<CR>:split<CR>:res +10<CR>:term<CR>
" Find and replace
noremap \s :%s///g<left><left><left>

" Comment
nnoremap <C-_> gcc
vnoremap <C-_> gc

" inoremap jj <Esc>

" Plugins
Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank'
Plug 'preservim/nerdtree'

" Please install IdeaVimExtension plugin in idea
set keep-english-in-normal-and-restore-in-insert
let context_aware=1
" let keep_input_source_in_insert=[com.sogou.inputmethod.sogou.pinyin]

" Multiple cursors
set multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
nmap <C-A-x> <Plug>SkipOccurrence
xmap <C-A-x> <Plug>SkipOccurrence
nmap <C-p> <Plug>RemoveOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" IdeaVim-EasyMotion
set easymotion
map <Leader> <Plug>(easymotion-prefix)
" 搜索全屏单词
map <Leader>w <Plug>(easymotion-bd-w)
" 搜索全屏匹配项
map <Leader>f <Plug>(easymotion-s)

nnoremap tt :action ActivateProjectToolWindow<CR>

" See also https://cloud.tencent.com/developer/article/2158218

